{
	"Event": {
		"System": {
			"Provider": {
				"Name": "PowerShell"
			},
			"EventID": {
				"Qualifiers": 0,
				"Value": 800
			},
			"Version": 0,
			"Level": 4,
			"Task": 8,
			"Opcode": 0,
			"Keywords": 36028797018963968,
			"TimeCreated": {
				"SystemTime": 1638798000.1111112
			},
			"EventRecordID": 111,
			"Correlation": {},
			"Execution": {
				"ProcessID": 0,
				"ThreadID": 0
			},
			"Channel": "Windows PowerShell",
			"Computer": "DESKTOP-EvtxHussar",
			"Security": {}
		},
		"EventData": {
			"Data": [
				"Add-Type -TypeDefinition $Source -Language CSharp -IgnoreWarnings\r\n",
				"\tDetailSequence=1\r\n\tDetailTotal=1\r\n\r\n\tSequenceNumber=35\r\n\r\n\tUserId=NT AUTHORITY\\LOCAL SERVICE\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.1237\r\n\tHostId=27a58bfa-e839-5bcd-d91f-5689d47d32c3\r\n\tHostApplication=C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -ExecutionPolicy AllSigned -NoProfile -NonInteractive -Command & {$OutputEncoding = [Console]::OutputEncoding =[System.Text.Encoding]::UTF8;$scriptFileStream = [System.IO.File]::Open('C:\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection\\DataCollection\\xxx.ps1', [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileAccess]::Read);$calculatedHash = Get-FileHash 'C:\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection\\DataCollection\\xxx.ps1' -Algorithm SHA256;if (!($calculatedHash.Hash -eq 'b545de56a106513269ea74f81e2268beae0fef0cff87fee4a98a66da7a643cc8')) { exit 324;}; . 'C:\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection\\DataCollection\\xxx.ps1' }\r\n\tEngineVersion=5.1.19041.1237\r\n\tRunspaceId=hb18d2se-363e-54b4-13fd-abb094570d0e\r\n\tPipelineId=1\r\n\tScriptName=C:\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection\\DataCollection\\xxx.ps1\r\n\tCommandLine=Add-Type -TypeDefinition $Source -Language CSharp -IgnoreWarnings\r\n",
				"CommandInvocation(Add-Type): \"Add-Type\"\r\nParameterBinding(Add-Type): name=\"TypeDefinition\"; value=\"                        using System;\r\n                        using System.Text;\r\n                        using System.Diagnostics.Tracing;\r\n                        using Microsoft.PowerShell.Commands;\r\n                        \r\n                        public static class ZZZ\r\n                        {\r\n                            public static EventSource log = new EventSource(\"Microsoft.Windows.Sense.ZZZZ\", EventSourceSettings.Etw);\r\n                        }\r\n\r\n                        [EventData] // [EventData] makes it possible to pass an instance of the class as an argument to EventSource.Write().\r\n                        public class CollectedWDConfig\r\n                        {\r\n\t\t\t\t\t\t    public bool DisableScriptScanning { get; set; }\r\n                            public int DontSubmitSamplesConsent { get; set; }\r\n                            public int EnableNetworkProtection { get; set; }\r\n                            public int SignatureUpdateInterval { get; set; }\r\n                            public bool EnableLowCpuPriority { get; set; }\r\n                            public int ScanParameters { get; set; } \r\n                            public String ScanScheduleTime { get; set; }\r\n                            public int CloudExtendedTimeout { get; set; }\r\n                            public bool DisableArchiveScanning { get; set; }\r\n                            public int ScanScheduleDay { get; set; }\r\n                            public bool DisableScanningNetworkFiles { get; set; }\r\n                            public int CloudBlockLevel { get; set; }\r\n                            public int ScanAvgCPULoadFactor { get; set; }\r\n                            public bool DisableScanningMappedNetworkDrivesForFullScan { get; set; } \r\n                            public String ScanScheduleQuickScanTime { get; set; }\r\n                            public int QuarantinePurgeItemsAfterDelay { get; set; }\r\n                            public bool UILockdown { get; set; }\r\n                            public bool DisableOnAccessProtection { get; set; }\r\n                            public bool DisableRemovableDriveScanning { get; set;}\r\n                            public String AntiMalwareProductVersion { get; set;}\r\n                            public String AntiSpywareSignatureVersion { get; set;}\r\n                            public String AntiMalwareEngineVersion { get; set;}\r\n                            public String AntiVirusSignatureVersion { get; set;}\r\n\r\n                            public CollectedWDConfig(bool disableScriptScanning, int submitSamplesConsent, int enableNetworkProtection, int signatureUpdateInterval,\r\n                                                     bool enableLowCpuPriority, int scanParameters, string scanScheduleTime, int cloudExtendedTimeout,\r\n                                                     bool disableArchiveScanning, int scanScheduleDay, bool disableScanningNetworkFiles, int cloudBlockLevel,\r\n                                                     int scanAvgCPULoadFactor, bool disableScanningMappedNetworkDrivesForFullScan, string scanScheduleQuickScanTime,\r\n                                                     int quarantinePurgeItemsAfterDelay, bool uiLockdown, bool disableOnAccessProtection, bool disableRemovableDriveScanning, \r\n                                                     string antiMalwareProductVersion, string antiSpywareSignatureVersion, string antiMalwareEngineVersion, string antiVirusSignatureVersion)\r\n                            {\r\n\t\t\t\t\t\t\t\tthis.DisableScriptScanning = disableScriptScanning;\r\n                                this.SubmitSamplesConsent = submitSamplesConsent;\r\n                                this.EnableNetworkProtection = enableNetworkProtection;\r\n                                this.SignatureUpdateInterval = signatureUpdateInterval;\r\n                                this.EnableLowCpuPriority = enableLowCpuPriority;\r\n                                this.ScanParameters = scanParameters;;\r\n                                this.ScanScheduleTime = scanScheduleTime;\r\n                                this.CloudExtendedTimeout = cloudExtendedTimeout;\r\n                                this.DisableArchiveScanning = disableArchiveScanning;\r\n                                this.ScanScheduleDay = scanScheduleDay;;\r\n                                this.DisableScanningNetworkFiles = disableScanningNetworkFiles;\r\n                                this.CloudBlockLevel = cloudBlockLevel;\r\n                                this.ScanAvgCPULoadFactor = scanAvgCPULoadFactor;\r\n                                this.DisableScanningMappedNetworkDrivesForFullScan = disableScanningMappedNetworkDrivesForFullScan;\r\n                                this.ScanScheduleQuickScanTime = scanScheduleQuickScanTime;\r\n                                this.QuarantinePurgeItemsAfterDelay = quarantinePurgeItemsAfterDelay;\r\n                                this.UILockdown = uiLockdown;\r\n                                this.DisableOnAccessProtection = disableOnAccessProtection;\r\n                                this.DisableRemovableDriveScanning = disableRemovableDriveScanning;\r\n                                this.AntiMalwareProductVersion =  antiMalwareProductVersion;\r\n                                this.AntiSpywareSignatureVersion = antiSpywareSignatureVersion;\r\n                                this.AntiMalwareEngineVersion = antiMalwareEngineVersion;\r\n                                this.AntiVirusSignatureVersion = antiVirusSignatureVersion;\r\n                            }\r\n                        }\r\n\"\r\nParameterBinding(Add-Type): name=\"Language\"; value=\"CSharp\"\r\nParameterBinding(Add-Type): name=\"IgnoreWarnings\"; value=\"True\"\r\n"
			]
		}
	}
}